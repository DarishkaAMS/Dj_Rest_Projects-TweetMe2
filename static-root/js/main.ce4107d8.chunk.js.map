{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","finalTweetsInit","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEL","document","getElementById","ReactDOM","render","tweetsEL"],"mappings":"+MAAe,G,MAAA,IAA0B,kC,sBCIlC,SAASA,EAAgBC,GAC5B,IAAMC,EAAcC,IAAMC,YADQ,EAEAC,mBAAS,IAFT,mBAE3BC,EAF2B,KAEhBC,EAFgB,KAgBlC,OAAO,sBAAKC,UAAWP,EAAMO,UAAtB,UACH,qBAAKA,UAAU,cAAf,SACH,uBAAMC,SAfc,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GAExBS,EAAcC,QAAQ,CAClBC,QAASL,EACTM,MAAO,EACPC,GAAI,QAERZ,EAAaQ,GACbb,EAAYW,QAAQC,MAAQ,IAI/B,UACG,0BAAUM,IAAKlB,EAAamB,UAAU,EAAMb,UAAU,eAAec,KAAK,UAE1E,wBAAQC,KAAK,SAASf,UAAU,uBAAhC,0BAGI,cAACgB,EAAD,CAAYlB,UAAWA,OAI5B,SAASkB,EAAWvB,GAAQ,IAAD,EACMI,mBAAS,IADf,mBACvBoB,EADuB,KACXC,EADW,OAEFrB,mBAAS,IAFP,mBAEvBsB,EAFuB,KAEfC,EAFe,KAoB9B,OAjBAC,qBAAU,WACN,IAAMC,EAAQ,YAAI7B,EAAMK,WAAWyB,OAAON,GACtCK,EAAME,SAAWL,EAAOK,QACxBJ,EAAUE,KAEf,CAAC7B,EAAMK,UAAWqB,EAAQF,IAC7BI,qBAAU,YCxCP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAKhBD,EAAIE,aAFiB,OAGrBF,EAAIG,KALW,MACH,sCAKZH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAAUL,EAAIM,SAE/BN,EAAIO,QAAU,SAAUC,GACpBC,QAAQC,IAAIF,GACZT,EAAS,CAAC,QAAW,4BAA6B,MAEtDC,EAAIW,ODkCAC,EARmB,SAACP,EAAUC,GAC1B,GAAe,MAAXA,EAAgB,CACpB,IAAMO,EAAkB,YAAIR,GAAUR,OAAON,GAC7CC,EAAcqB,QAEVC,MAAM,2BAId,CAACvB,IACEE,EAAOsB,KAAI,SAACC,EAAMC,GACrB,OAAO,cAACC,EAAD,CAAOC,MAAOH,EAAM1C,UAAU,uCAA2C,yBAIjF,SAAS8C,EAAUrD,GAAO,IACtBoD,EAAiBpD,EAAjBoD,MAAOE,EAAUtD,EAAVsD,OADc,EAEFlD,mBAASgD,EAAMnC,MAAQmC,EAAMnC,MAAQ,GAFnC,mBAErBA,EAFqB,KAEdsC,EAFc,OAGInD,oBAA4B,IAAnBgD,EAAMI,UAHnB,mBAGrBA,EAHqB,KAGXC,EAHW,KAItBlD,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,yBAChDmD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAclDA,EAA0B,SAAhBL,EAAOhC,KAAP,UAA4BL,EAA5B,YAAqCyC,GAAkBA,EACvE,OAAO,yBAAQnD,UAAWA,EAAWqD,QAbjB,SAACnD,GACjBA,EAAMC,iBACc,SAAhB4C,EAAOhC,QACU,IAAbkC,GACAD,EAAStC,EAAQ,GACjBwC,GAAY,KAEZF,EAAStC,EAAQ,GACjBwC,GAAY,MAKjB,cAAsDE,EAAtD,OAGJ,SAASR,EAAMnD,GAAQ,IACnBoD,EAASpD,EAAToD,MACD7C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OAAO,sBAAKA,UAAWA,EAAhB,UACH,8BAAI6C,EAAMlC,GAAV,MAAiBkC,EAAMpC,WACvB,qBAAKT,UAAU,kBACX,cAAC8C,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAChC,KAAK,OAAQqC,QAAS,WACxD,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAChC,KAAK,SAAUqC,QAAS,YAC1D,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAChC,KAAK,UAAWqC,QAAS,gBEzDxDE,MAzBf,WAEE,OACE,qBAAKtD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKuD,IAAKC,EAAMxD,UAAU,WAAWyD,IAAI,SACzC,sCACO,8CADP,0BAGA,8BACI,cAACjE,EAAD,MAEJ,mBACEQ,UAAU,WACV0D,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCNOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,EAAQC,SAASC,eAAe,QAClCF,GACAG,IAASC,OAAO,cAAC,EAAD,IAASJ,GAU7B,IAAMK,EAAWJ,SAASC,eAAe,aACrCG,GACAF,IAASC,OAAO,cAAClF,EAAD,IAAqBmF,GAMzCd,M","file":"static/js/main.ce4107d8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props){\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        // chang this to a server side call\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 12313\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n     <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n        </textarea>\r\n        <button type='submit' className='btn btn-primary my-3'> Tweet </button>\r\n    </form>\r\n        </div>\r\n            <TweetsList newTweets={newTweets} />\r\n    </div>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if (final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n    useEffect(() => {\r\n        const myCallback = (response, status) => {\r\n            if (status === 200) {\r\n            const finalTweetsInit = [...response].concat(tweetsInit)\r\n            setTweetsInit(finalTweetsInit)\r\n            } else {\r\n                alert('There was an error')\r\n            }\r\n        }\r\n        loadTweets(myCallback)\r\n     }, [tweetsInit])\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={'${index}-{item.id}'} />\r\n    })\r\n}\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}> {display} </button>\r\n\r\n}\r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n        <p>{tweet.id} - {tweet.content}</p>\r\n        <div className='btn btn-group'></div>\r\n            <ActionBtn tweet={tweet} action={{type:'like', display: 'Likes'}}/>\r\n            <ActionBtn tweet={tweet} action={{type:'unlike', display: 'Unlike'}}/>\r\n            <ActionBtn tweet={tweet} action={{type:'retweet', display: 'Retweet'}}/>\r\n        </div>\r\n}","\r\nexport function loadTweets(callback){\r\n    const xhr = new XMLHttpRequest() // xhr = SomeClass()\r\n    const method = 'GET' // 'POST'\r\n    const url = ' http://localhost:8000/api/tweets/'\r\n    const responseType = 'json'\r\n\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n        console.log(e)\r\n        callback({'message': 'The request was an error'}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n            <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\n\nconst appEL = document.getElementById('root')\nif (appEL) {\n    ReactDOM.render(<App />, appEL);\n}\n\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\nconst tweetsEL = document.getElementById('tweetme-2')\nif (tweetsEL) {\n    ReactDOM.render(<TweetsComponent />, tweetsEL)\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}